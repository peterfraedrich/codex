{
  "author": {
    "name": "Henri Bouvier"
  },
  "name": "tomahawk",
  "description": "Minimal HTTP Server",
  "version": "0.1.6",
  "repository": {
    "type": "git",
    "url": "https://github.com/hbouvier/tomahawk.git"
  },
  "dependencies": {
    "body-parser": "1.5.0",
    "connect": "3.0.2",
    "errorhandler": "1.1.1",
    "express": "4.6.1",
    "morgan": "1.2.0",
    "node-options": "0.0.6",
    "socket.io": "1.0.6",
    "winston": "0.7.3"
  },
  "engines": {
    "node": ">= 0.8.0 < 0.11.0"
  },
  "main": "./lib/tomahawk.js",
  "bin": {
    "tomahawk": "./bin/tomahawk"
  },
  "scripts": {
    "start": "bin/tomahawk"
  },
  "configuration": {
    "name": "Tomahawk",
    "level": "verbose",
    "www": ".",
    "config": "config.json",
    "context": "/",
    "port": 8080,
    "ip": "0.0.0.0",
    "plugins": [],
    "routes": [],
    "cgi": [],
    "headers": [],
    "socket": {
      "level": "error",
      "transports": [
        "websocket",
        "flashsocket",
        "htmlfile",
        "xhr-polling",
        "jsonp-polling"
      ],
      "pollingduration": 10
    }
  },
  "readme": "[![Build Status](https://travis-ci.org/hbouvier/tomahawk.png)](https://travis-ci.org/hbouvier/tomahawk)\n[![dependency Status](https://david-dm.org/hbouvier/tomahawk/status.png?theme=shields.io)](https://david-dm.org/hbouvier/tomahawk#info=dependencies)\n[![devDependency Status](https://david-dm.org/hbouvier/tomahawk/dev-status.png?theme=shields.io)](https://david-dm.org/hbouvier/tomahawk#info=devDependencies)\n[![NPM version](https://badge.fury.io/js/tomahawk.png)](http://badge.fury.io/js/tomahawk)\n\nTomahawk\n========\n\nTomahawk provide you with a minimal http server, that can be started on the command line to serve static content.\n\n## To install \n\nnpm install -g tomahawk\n\n\n## How to use the Tomahawk web server\n\n- To serve the current directory using the default port 8080\n\n    tomahawk\n\n- To serve \"web/public\" from the current directory using the default port 8080\n\n\ttomahawk --www=web/public\n\n- To use a different port (e.g. 3000)\n\t\n\ttomahawk --port=3000\n\n- How can I prefix my static content with MyApp (e.g. http://localhost:8080/MyApp insead of the default http://localhost:8080/)\n\n\ttomahawk --context=/MyApp\n\n- How about less logging?\n\n\ttomahawk --level=error\n\n## How can I add CORS http headers\n\n\ttomahawk --config=config.development.json\nor\n\n    tomahawk --headers='[\"Access-Control-Allow-Origin:*\",\"Access-Control-Allow-Methods:GET,PUT,POST,DELETE\",\"Access-Control-Allow-Headers:Content-Type\",\"X-Frame-Options:ALLOWALL\"]'\n    \n## start a CGI\n    tomahawk --cgi='[{\"route\":\"/echo\",\"method\":\"POST\",\"command\":\"/bin/sh\", \"args\":[\"-c\", \"read line ; echo $line\"], \"encoding\":\"utf8\"}]'\n    echo allo | curl -X POST -d @- http://localhost:8080/echo\n\n\n- Can I save the configration, to avoid typing it every time?\n\n\t1) Either create a config.json and save it in the current working directory\n\t2) Create your configuration file (e.g. tommy.cfg) and :\n\t\ttomahawk --config=tommy.cfg\n\tor\n\t\texport CONFIG=tommy.cfg\n\t\ttomahawk\n\n\tYour configuration file should look like:\n\n\t    {\n            \"level\"      : \"error\",\n            \"www\"        : \".\",\n            \"context\"    : \"/MyApp\",\n            \"port\"       : 9000,\n            \"headers\"    : [\n                \"Access-Control-Allow-Origin:*\",\n                \"X-Frame-Options:ALLOWALL\"\n            ],\n            \"cgi\" : [\n                {\n                    \"route\"   : \"/version\",\n                \t\"method\"  : \"GET\",\n                \t\"command\" : \"/bin/sh\",\n                \t\"args\"    : [\"-c\",  \"echo '{\\\"version\\\":\\\"1.0.0\\\"}'\"]\n                }\n            ]\n         }\n\n## How can I include tomahawk into my project as a module to server REST routes?\n\nYou can look at the sample code under the sample directory:\n\nsamples/sample_server.js:\n\n    var app = require('tomahawk').create({port:8080,routes:[__dirname + '/lib/routes']}).start();\n\nsamples/lib/routes.js':\n\n    module.exports = function () {\n    \n        function routes(app, config, io) {\n            var database = {\n                captains : {\n                    \"jim\"    : \"James Tiberius Kirk\",\n                    \"picard\" : \"Jean-Luc Picard\"\n                },\n                starShips : {\n                    \"jim\": \"NCC1701-A\",\n                    \"picard\": \"NCC1701-D\"\n                }\n            };\n    \n            // GET\n            app.get('/api/v1/captain/:id?', function (req, res) {\n                var withStarship = req.query.starship === 'true';\n                if (req.params.id) {\n                    res.json(withStarship ?\n                    {id:req.params.id,name:database.captains[req.params.id], starship:database.starShips[req.params.id]} :\n                    {id:req.params.id,name:database.captains[req.params.id]});\n                } else {\n                    res.json(database.captains);\n                }\n                res.end();\n            });\n    \n            // PUT\n            app.put('/api/v1/captain/:id', function (req, res) {\n                database.captains[req.params.id] = req.body;\n                io.sockets.emit('new:captain', {id:req.params.id, name:req.body});  // Optional, if you want to use websocket\n                res.json({id:req.params.id,operation:\"put\",status:\"OK\"});\n                res.end();\n            });\n    \n            // DELETE\n            app.delete('/api/v1/captain/:id', function (req, res) {\n                delete database.captains[req.params.id];\n                io.sockets.emit('del:captain', {id:req.params.id}); // Optional, if you want to use websocket\n                res.json({id:req.params.id,operation:\"delete\", status:\"OK\"});\n                res.end();\n            });\n        }\n    \n        return routes;\n    }();    \n\nRun:\n\n    node sample_server.js",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/hbouvier/tomahawk/issues"
  },
  "_id": "tomahawk@0.1.6",
  "dist": {
    "shasum": "1779ce0c903dbd720fc3a816e916e8d004d9b816"
  },
  "_from": "tomahawk@0.1.6",
  "_resolved": "https://registry.npmjs.org/tomahawk/-/tomahawk-0.1.6.tgz"
}
